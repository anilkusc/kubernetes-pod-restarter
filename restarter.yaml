apiVersion: v1
kind: ServiceAccount
metadata:
  name: restarter
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: restarter-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: restarter_admin_dev
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: restarter-role
subjects:
- kind: ServiceAccount
  name: restarter
  namespace: default
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: restarter
  namespace: default
spec:
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  schedule: "1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: restarter
          restartPolicy: OnFailure          
          containers:
          - name: restarter
            image: debian:stretch
            command: ["/app/entrypoint.sh"]
            args: ["nginx","default"]
            imagePullPolicy: IfNotPresent
            volumeMounts:
            - name: script
              mountPath: /app/entrypoint.sh
              subPath: entrypoint.sh
          volumes:
            - name: script
              configMap:
                defaultMode: 477
                name: entrypoint            
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: entrypoint
  labels:
    app: entrypoint
data:
  entrypoint.sh: |-
    #!/bin/bash
    apt-get update && apt-get install jq curl -y
    TARGET_POD=$1
    TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
    NAMESPACE=$2
    if [[ $NAMESPACE == "" ]]; then
    NAMESPACE=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    fi
    KUBERNETES=https://kubernetes.default.svc.cluster.local/api/v1/namespaces/$NAMESPACE/pods
    POD_COUNT=$(curl -s -H "Authorization: Bearer $TOKEN" $KUBERNETES --insecure | jq '.items | length')
    for (( c=0; c<=$POD_COUNT ; c++ ))
    do
       POD_NAME=$(curl -s -H "Authorization: Bearer $TOKEN" $KUBERNETES --insecure |jq .items | jq .[$c] | jq .metadata | jq -r .name)
       if [[ $POD_NAME == *$TARGET_POD* ]]; then
       curl -s $KUBERNETES/$POD_NAME -X DELETE -k -H "Authorization: Bearer $TOKEN"
       fi
    done
